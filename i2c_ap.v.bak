`timescale 1ns / 1ps
//******************************************************************************
// File Name            : i2c_ap.v
//------------------------------------------------------------------------------
// Function             : i2c sample application
//                        
//------------------------------------------------------------------------------
// Designer             : yokomizo 
//------------------------------------------------------------------------------
// History
// -.-- 2010/10/09
//******************************************************************************
module i2c_ap ( 
 clk, rstb, led_0,
 scl,sda,
 txd,rxd
);
  input clk;
  input rstb;   
  output led_0;
  output scl;   //I2C SCL
  inout  sda;   //I2C SDA
  output txd;   //serial tx data    
  input  rxd;   //serial rx data
 
  wire  led_0;
   
  wire wr;
  wire rd;
  wire [6:0]adr;
  wire [31:0]wr_data; 
  wire [2:0]wr_bytes; 
  wire [3:0]wr_be; 
  wire rd_data_en;
  wire [31:0]rd_data;
  wire [2:0]rd_bytes; 
  wire [3:0]rd_be; 
  wire    scl_drv;
  wire    sda_i;
  wire    sda_o;
      
  wire  [7:0] tx_fifo_data;    //tx fifo data 8bit
  wire        tx_fifo_data_en; //tx fifo data enable 
  wire       tx_fifo_ren;     //tx fifo read enable 
  wire       tx_fifo_empty;   //tx fifo read enable 
  wire       tx_fifo_full ;   //tx fifo read enable 
  wire       tx_fifo_n_full ; //tx fifo read enable 
  wire [7:0] tx_data;        //tx data 8bit
  wire       tx_data_en;      //tx data enable 
  wire       tx_busy;         //tx busy

// IO driver      
assign sda = (sda_o==1'b0)?1'b0:1'bz;
assign sda_i = sda;
assign scl = (scl_drv==1'b0)?1'b0:1'bz;
   
i2c_m_if i2c_m_if(
  .clk(   clk),
  .rstb(  rstb),
  .scl(  scl_drv),
  .sda_o(  sda_o),
  .sda_i(  sda_i),
  .wr(    wr),
  .rd(    rd),
  .adr(   adr),
  .wr_data(wr_data),
  .wr_bytes(wr_bytes),
  .rd_data(rd_data),
  .rd_data_en(rd_data_en),
  .rd_bytes(rd_bytes),
  .busy(busy) 
  );

//24FCX                    
//i2c_24fcx_ctrl i2c_dev_ctrl( 
//LM84     
//i2c_lm73_ctrl i2c_dev_ctrl(
//KXP84                    
i2c_kxp84_ctrl i2c_dev_ctrl( 
  .clk(   clk),
  .rstb(  rstb),
  .led_0( led_0),
  .wr(    wr),
  .rd(    rd),
  .adr(   adr),
  .wr_data(wr_data),
  .wr_bytes(wr_bytes),
  .rd_data(rd_data),
  .rd_data_en(rd_data_en),
  .rd_bytes(rd_bytes),
  .tx_fifo_data_en    (tx_fifo_data_en),   
  .tx_fifo_data   (tx_fifo_data)
);

      
parameter data_width = 8   ;
parameter data_no = data_width -1;
parameter adr_width = 4   ;
parameter adr_no = adr_width -1;
parameter mem_size = (1 << adr_width)-1;

assign tx_fifo_ren = ((tx_busy==1'b0)&&(tx_data_en==1'b0))?1'b1:1'b0;

   
fifo
#(data_width,
  data_no,
  adr_width,
  adr_no,
  mem_size)
tx_fifo(
.CLK    (clk),
.RESET_N  (rstb), 
.WEN    (tx_fifo_data_en),   
.WDAT   (tx_fifo_data),  
.REN    (tx_fifo_ren),     
.RDAT   (tx_data),
.RDAT_EN   (tx_data_en),
.EMPTY  (tx_fifo_empty),
.FULL   (tx_fifo_full),
.N_FULL (tx_fifo_n_full)
);


assign rx_fifo_ren = 1'b1;
 
       
rs232c_tx_rx  rs232c_tx_rx(
.RESETB(     rstb),      
.CLK(        clk),           
.TXD(        txd),           
.RXD(        rxd),           
.TX_DATA(    tx_data ),     
.TX_DATA_EN( tx_data_en),  
.TX_BUSY(    tx_busy),     
.RX_DATA(    rx_data),     
.RX_DATA_EN( rx_data_en),  
.RX_BUSY(    rx_busy))             
;
   
   
endmodule






